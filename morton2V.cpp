#include <stdint.h>
#include "mex.h"

void morton2V(uint64_t *val, double *VX, size_t N)
{
    double		*VY = VX+N, *VZ = VY+N;

    for(size_t i=0; i<N; i++)
    {
        VZ[i] = (((*val) & 0x0000000000000001)>> 0) +
                (((*val) & 0x0000000000000008)>> 2) +
                (((*val) & 0x0000000000000040)>> 4) +
                (((*val) & 0x0000000000000200)>> 6) +
                (((*val) & 0x0000000000001000)>> 8) +
                (((*val) & 0x0000000000008000)>>10) +
                (((*val) & 0x0000000000040000)>>12) +
                (((*val) & 0x0000000000200000)>>14) +
                (((*val) & 0x0000000001000000)>>16) +
                (((*val) & 0x0000000008000000)>>18) +
                (((*val) & 0x0000000040000000)>>20) +
                (((*val) & 0x0000000200000000)>>22) +
                (((*val) & 0x0000001000000000)>>24) +
                (((*val) & 0x0000008000000000)>>26) +
                (((*val) & 0x0000040000000000)>>28) +
                (((*val) & 0x0000200000000000)>>30) +
                (((*val) & 0x0001000000000000)>>32) +
                (((*val) & 0x0008000000000000)>>34) +
                (((*val) & 0x0040000000000000)>>36) +
                (((*val) & 0x0200000000000000)>>38) +
                (((*val) & 0x1000000000000000)>>40);
        
        VY[i] = (((*val) & 0x0000000000000002)>> 1) +
                (((*val) & 0x0000000000000010)>> 3) +
                (((*val) & 0x0000000000000080)>> 5) +
                (((*val) & 0x0000000000000400)>> 7) +
                (((*val) & 0x0000000000002000)>> 9) +
                (((*val) & 0x0000000000010000)>>11) +
                (((*val) & 0x0000000000080000)>>13) +
                (((*val) & 0x0000000000400000)>>15) +
                (((*val) & 0x0000000002000000)>>17) +
                (((*val) & 0x0000000010000000)>>19) +
                (((*val) & 0x0000000080000000)>>21) +
                (((*val) & 0x0000000400000000)>>23) +
                (((*val) & 0x0000002000000000)>>25) +
                (((*val) & 0x0000010000000000)>>27) +
                (((*val) & 0x0000080000000000)>>29) +
                (((*val) & 0x0000400000000000)>>31) +
                (((*val) & 0x0002000000000000)>>33) +
                (((*val) & 0x0010000000000000)>>35) +
                (((*val) & 0x0080000000000000)>>37) +
                (((*val) & 0x0400000000000000)>>39) +
                (((*val) & 0x2000000000000000)>>41);
        
        VX[i] = (((*val) & 0x0000000000000004)>> 2) +
                (((*val) & 0x0000000000000020)>> 4) +
                (((*val) & 0x0000000000000100)>> 6) +
                (((*val) & 0x0000000000000800)>> 8) +
                (((*val) & 0x0000000000004000)>>10) +
                (((*val) & 0x0000000000020000)>>12) +
                (((*val) & 0x0000000000100000)>>14) +
                (((*val) & 0x0000000000800000)>>16) +
                (((*val) & 0x0000000004000000)>>18) +
                (((*val) & 0x0000000020000000)>>20) +
                (((*val) & 0x0000000100000000)>>22) +
                (((*val) & 0x0000000800000000)>>24) +
                (((*val) & 0x0000004000000000)>>26) +
                (((*val) & 0x0000020000000000)>>28) +
                (((*val) & 0x0000100000000000)>>30) +
                (((*val) & 0x0000800000000000)>>32) +
                (((*val) & 0x0004000000000000)>>34) +
                (((*val) & 0x0020000000000000)>>36) +
                (((*val) & 0x0100000000000000)>>38) +
                (((*val) & 0x0800000000000000)>>40) +
                (((*val) & 0x4000000000000000)>>42);
                
        val++;
    }
}

void mexFunction(int nlhs, mxArray *plhs[],
                 int nrhs, const mxArray *prhs[])
{
    if( nrhs!=1 || nlhs>1 )
        mexErrMsgTxt("Expected 1 input and 1 output");
    if( mxGetClassID(prhs[0])!=mxUINT64_CLASS )
        mexErrMsgTxt("Input should be UINT64");
    
    plhs[0] = mxCreateDoubleMatrix( mxGetNumberOfElements(prhs[0]), 3, mxREAL);
    morton2V((uint64_t *) mxGetPr(prhs[0]), mxGetPr(plhs[0]), mxGetNumberOfElements(prhs[0]));
}

